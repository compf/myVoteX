@model Model.SimpleBallot
@using System.Linq;
@{
    ViewData["Title"] = "Home Page";
}
<div class="text-center">
    <h1 class="display-4">Stimmzettel</h1>
    <div>
        @foreach (var group in Model.Ballot.Groups)
        {
            <h2>@group.Key</h2>
            <div>
                @foreach (var vote in group.Value.Votes)
                {
                    <span>@vote.Key</span>

                    <input name="@group.Key" value="@vote.Key" type="radio" />

                    <br />
                }
            </div>
        }
        <button onclick="submit(event)">Absenden</button>
    </div>
    <script>

        function submit(e) {
            let ballot = {
                Groups: {}
            }
            document.querySelectorAll('input[type="radio"]:checked').forEach((radio) => {
                let group = radio.name;
                let vote = radio.value;
                if (!ballot.Groups[group]) {
                    ballot.Groups[group] = { Votes: {} }
                }
                if (!ballot.Groups[group].Votes[vote]) {
                    ballot.Groups[group].Votes[vote] = { Value: radio.checked }
                }
            });
            let ballotString = (JSON.stringify(ballot))


            encrypt(ballotString).then((a) => {
                let body = {
                    EncryptedBallotData: a.encrypted,
                    EncryptedKey: a.wrappedKey,
                    Ivs: a.iv,
                    ReturnAddress: returnAddress,
                    PublicKey: publicKey,
                    BallotId: ballotId
                }
                body = JSON.stringify(body)
                console.log(body)
                fetch(returnAddress, {
                    method: "POST",
                    body: body,
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

            });
        }
























        const publicKey = "@Html.Raw(Model.PublicKey)"
        const returnAddress = "@Html.Raw(Model.ReturnAddress)"
        const ballotId = "@Html.Raw(Model.BallotId)"



        function str2ab(str) {
            const buf = new ArrayBuffer(str.length);
            const bufView = new Uint8Array(buf);
            for (let i = 0, strLen = str.length; i < strLen; i++) {
                bufView[i] = str.charCodeAt(i);
            }
            return buf;
        }

        async function importRsaKey(pem) {
            // fetch the part of the PEM string between header and footer
            //let splitted = pem.split("\n");
            //const pemHeader = splitted[0];
            //const pemFooter = splitted[splitted.length - 1];
            let pemContents = pem
            console.log("\"", pemContents, "\"");
            // base64 decode the string to get the binary data
            const binaryDerString = window.atob(pemContents);
            // convert from a binary string to an ArrayBuffer
            const binaryDer = str2ab(binaryDerString);

            return await window.crypto.subtle.importKey(
                "spki",
                binaryDer,
                {
                    name: "RSA-OAEP",
                    hash: "SHA-256",
                },
                true,
                ["encrypt", "wrapKey"],
            );
        }

        function arrayBufferToBase64(buffer) {
            let binary = '';
            let bytes = new Uint8Array(buffer);
            let len = bytes.byteLength;
            for (let i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return btoa(binary);
        }




        async function encrypt(text) {
            let aesKey = await window.crypto.subtle.generateKey({
                name: "AES-GCM",
                length: 256
            }, true, ["encrypt", "decrypt", "wrapKey", "unwrapKey"]);


            let rsaKey = await importRsaKey(publicKey);

            let encryptedKey = await window.crypto.subtle.wrapKey("raw", aesKey, rsaKey, "RSA-OAEP");

            let iv = window.crypto.getRandomValues(new Uint8Array(12));
            let encrypted = await window.crypto.subtle.encrypt({
                name: "AES-GCM",
                iv: iv,
            }, aesKey, new TextEncoder().encode(text));
            return {
                wrappedKey: arrayBufferToBase64(encryptedKey),
                encrypted: arrayBufferToBase64(encrypted),
                iv: arrayBufferToBase64(iv)
            }
        }
















    </script>
</div>
